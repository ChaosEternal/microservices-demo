apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: build-omnishop-all
spec:
  params:
    - name: pathToContext
      type: string
      description: Path to context
      default: $(resources.inputs.docker-source.path)
    - name: versiontag
      type: string
      description: the tag of the image
      default: latest      
  resources:
    - name: docker-source
      type: git
    - name: builtImage
      type: image      
  tasks:
    - name: build-adservice
      taskRef:
        name: build-omnishop-1app
      params:
        - name: appName
          value: adservice
        - name: versiontag
          value: $(params.versiontag)
      resources:
        inputs:
          - name: docker-source
            resource: docker-source
        outputs:
          - name: builtImage
            resource: builtImage
    - name: build-cartservice
      taskRef:
        name: build-omnishop-1app
      params:
        - name: appName
          value: cartservice
        - name: versiontag
          value: $(params.versiontag)
      resources:
        inputs:
          - name: docker-source
            resource: docker-source
        outputs:
          - name: builtImage
            resource: builtImage
    - name: build-checkoutservice
      taskRef:
        name: build-omnishop-1app
      params:
        - name: appName
          value: checkoutservice
        - name: versiontag
          value: $(params.versiontag)
      resources:
        inputs:
          - name: docker-source
            resource: docker-source
        outputs:
          - name: builtImage
            resource: builtImage
    - name: build-currencyservice
      taskRef:
        name: build-omnishop-1app
      params:
        - name: appName
          value: currencyservice
        - name: versiontag
          value: $(params.versiontag)
      resources:
        inputs:
          - name: docker-source
            resource: docker-source
        outputs:
          - name: builtImage
            resource: builtImage
    - name: build-frontend
      taskRef:
        name: build-omnishop-1app
      params:
        - name: appName
          value: frontend
        - name: versiontag
          value: $(params.versiontag)
      resources:
        inputs:
          - name: docker-source
            resource: docker-source
        outputs:
          - name: builtImage
            resource: builtImage
    - name: build-loadgenerator
      taskRef:
        name: build-omnishop-1app
      params:
        - name: appName
          value: loadgenerator
        - name: versiontag
          value: $(params.versiontag)
      resources:
        inputs:
          - name: docker-source
            resource: docker-source
        outputs:
          - name: builtImage
            resource: builtImage
    - name: build-paymentservice
      taskRef:
        name: build-omnishop-1app
      params:
        - name: appName
          value: paymentservice
        - name: versiontag
          value: $(params.versiontag)
      resources:
        inputs:
          - name: docker-source
            resource: docker-source
        outputs:
          - name: builtImage
            resource: builtImage
    - name: build-productcatalogservice
      taskRef:
        name: build-omnishop-1app
      params:
        - name: appName
          value: productcatalogservice
        - name: versiontag
          value: $(params.versiontag)
      resources:
        inputs:
          - name: docker-source
            resource: docker-source
        outputs:
          - name: builtImage
            resource: builtImage
    - name: build-recommendationservice
      taskRef:
        name: build-omnishop-1app
      params:
        - name: appName
          value: recommendationservice
        - name: versiontag
          value: $(params.versiontag)
      resources:
        inputs:
          - name: docker-source
            resource: docker-source
        outputs:
          - name: builtImage
            resource: builtImage
    - name: build-shippingservice
      taskRef:
        name: build-omnishop-1app
      params:
        - name: appName
          value: shippingservice
        - name: versiontag
          value: $(params.versiontag)
      resources:
        inputs:
          - name: docker-source
            resource: docker-source
        outputs:
          - name: builtImage
            resource: builtImage
---
# res github
apiVersion: tekton.dev/v1alpha1
kind: PipelineResource
metadata:
  name: omnishop-github
spec:
  type: git
  params:
    - name: revision
      value: release/v0.2.1
    - name: url
      value: https://github.com/GoogleCloudPlatform/microservices-demo/
---
# res gcr
apiVersion: tekton.dev/v1alpha1
kind: PipelineResource
metadata:
  name: omnishop-gcr-project
spec:
  type: image
  params:
    - name: url
      value: gcr.io/jscheng-cfkf-demo/
---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: build-omnishop-all-from-git-run-3
spec:
  serviceAccountName: gcr-io-write-sa
  pipelineRef:
    name: build-omnishop-all
  params:
    - name: versiontag
      value: a20210104
  resources:
    - name: docker-source
      resourceRef:
        name: omnishop-github
    - name: builtImage
      resourceRef:
        name: omnishop-gcr-project
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-omnishop-1app
spec:
  params:
    - name: pathToContext
      type: string
      description: |
        The build context used by Kaniko
        (https://github.com/GoogleContainerTools/kaniko#kaniko-build-contexts)
      default: $(resources.inputs.docker-source.path)
    - name: appName
      type: string
      description: |
        The service name in omnishop to be built.
      default: emailservice
    - name: versiontag
      type: string
      description: the tag of the image
      default: latest
  resources:
    inputs:
      - name: docker-source
        type: git
    outputs:
      - name: builtImage
        type: image
  steps:
# step
    - name: build-and-push-emailservice
      image: gcr.io/kaniko-project/executor:v0.16.0
      # specifying DOCKER_CONFIG is required to allow kaniko to detect docker credential
      env:
        - name: "DOCKER_CONFIG"
          value: "/tekton/home/.docker/"
      command:
        - /kaniko/executor
      args:
        - --dockerfile=$(resources.inputs.docker-source.path)/src/$(params.appName)/Dockerfile
        - --destination=$(resources.outputs.builtImage.url)$(params.appName):$(params.versiontag)
        - --context=$(params.pathToContext)/src/$(params.appName)
---
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: EventListener
metadata:
  name: github-listener-interceptor
spec:
  triggers:
    - name: github-listener
      interceptors:
        - github:
            secretRef:
              secretName: github-secret
              secretKey: secretToken
            eventTypes:
              - push
        - cel:
            filter: "body.ref in ['refs/heads/master']"
            overlays:
              - key: extensions.short_commit
                expression: "body.after.truncate(7)"
      bindings:
        - ref: github-pr-binding
      template:
        ref: github-template
  resources:
    kubernetesResource:
      serviceType: NodePort
      spec:
        template:
          spec:
            serviceAccountName: tekton-triggers-example-sa
            containers:
              - resources:
                  requests:
                    memory: "64Mi"
                    cpu: "250m"
                  limits:
                    memory: "128Mi"
                    cpu: "500m"

---
apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerBinding
metadata:
  name: github-pr-binding
spec:
  params:
    - name: gitrevision
      value: $(body.after)
    - name: gitrepositoryurl
      value: $(body.repository.clone_url)
    - name: versiontag
      value: $(body.extensions.short_commit)
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerTemplate
metadata:
  name: github-template
spec:
  params:
    - name: gitrevision
    - name: gitrepositoryurl
    - name: versiontag
  resourcetemplates:
    - apiVersion: tekton.dev/v1alpha1
      kind: PipelineRun
      metadata:
        generateName: github-run-
      spec:
        serviceAccountName: gcr-io-write-sa
        pipelineRef:
          kind: Pipeline
          name: build-omnishop-all
        params:
          - name: versiontag
            value: $(tt.params.versiontag)
        resources:
          - name: builtImage
            resourceSpec:
              params:
                - name: url
                  value: gcr.io/jscheng-cfkf-demo/
              type: image
          - name: docker-source
            resourceSpec:
              type: git
              params:
                - name: revision
                  value: $(tt.params.gitrevision)
                - name: url
                  value: $(tt.params.gitrepositoryurl)
---
